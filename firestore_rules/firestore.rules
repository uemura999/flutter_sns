rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{path=**}/posts/{postId} {
      allow read: if isAuthenticatedAndVerified();
    }
    match /{path=**}/postComments/{postCommentId} {
      allow read: if isAuthenticatedAndVerified();
    }
    match /{path=**}/postCommentReplies/{postCommentReplyId} {
      allow read: if isAuthenticatedAndVerified();
    }
    match /{path=**}/timelines/{postId} {
      allow read: if isAuthenticatedAndVerified();
    }
    match /deleteUsers/{uid} {
      allow create: if isTheSameUserAndVerified(uid) && isValidUser(request.resource.data, uid);
    }
    match /users/{uid} {
      allow read: if isAuthenticatedAndVerified();
      allow update: if isAdmin();
      //request.resource.dataは送信されたデータ
      allow create: if isTheSameUser(uid) && isValidUser(request.resource.data, uid);
      match /timelines/{postId} {
        allow read: if isTheSameUserAndVerified(uid);
        //作成と削除はcloudfunctionsで行う。
      }
      match /userUpdateLogs/{userUpdateLogId} {
        //本人だけにしかlogを作成できないようにする。
        allow create: if isTheSameUserAndVerified(uid);
      }
      match /userMutes/{activeUid} {
        // 作成と削除は受動的なユーザーのみが作成することができる。
        allow create, delete: if isTheSameUserAndVerified(activeUid);
      }
      match /tokens/{tokenId} {
        allow read, create, delete: if isTheSameUserAndVerified(uid);
      } 
      match /followers/{followerUid} {
        allow create, delete: if isTheSameUserAndVerified(followerUid);      
      }
      match /posts/{postId} {
        allow read: if isAuthenticatedAndVerified();
        allow update: if isAdmin();
        allow create: if isTheSameUserAndVerified(uid) && isValidPost(request.resource.data, uid);
        allow delete: if isTheSameUserAndVerified(uid);
        match /postMutes/{activeUid} {
          allow create, delete: if isTheSameUserAndVerified(activeUid);
        }
        match /postLikes/{activeUid} {
          allow create, delete: if isTheSameUserAndVerified(activeUid);
        }
        match /postComments/{postCommentId} {
          allow read: if isAuthenticatedAndVerified();
          allow update: if isAdmin();
          allow create: if isAuthenticatedAndVerified();
          //postCommentsのデータのuidが現在ログインしている人と同じであれば削除できる。
          allow delete: if isTheSameUserAndVerified(resource.data.uid);
          match /postCommentMutes/{activeUid} {
            allow create, delete: if isTheSameUserAndVerified(activeUid);
          }
          match /postCommentLikes/{activeUid} {
            allow create, delete: if isTheSameUserAndVerified(activeUid);
          }
          match /postCommentReplies/{postCommentReplyId} {
            allow read: if isAuthenticatedAndVerified();
            allow update: if isAdmin();
            allow create: if isAuthenticatedAndVerified();
            //postCommentReplyのデータのuidが現在ログインしている人と同じであれば削除できる。
            allow delete: if isTheSameUserAndVerified(resource.data.uid);
            match /postCommentReplyMutes/{activeUid} {
              allow create, delete: if isTheSameUserAndVerified(activeUid);
            }
            match /postCommentReplyLikes/{activeUid} {
              allow create, delete: if isTheSameUserAndVerified(activeUid);
            }
          }
        }
      }
    }  
  }
  function isAuthenticatedAndVerified() {
  return request.auth != null && isEmailVerified();
  }

  function isTheSameUser(uid) {
    return request.auth.uid == uid;
  }

  function isTheSameUserAndVerified(uid) {
    return request.auth.uid == uid && isEmailVerified();
  }
  function isAdmin() {
    return request.auth.uid == "WtyKn3pDcINcgODIyxRWQiLL1H03";
  }
  function isEmailVerified () {
    return request.auth.token.email_verified;
  }

  function isValidUser(user, uid) {
    //boolをreturn
    return user.size() == 15 &&
    "createdAt" in user && user.createdAt is timestamp &&
    "followerCount" in user && user.followerCount is int &&
    "followingCount" in user && user.followingCount is int &&
    "isAdmin" in user && user.isAdmin is bool &&
    "muteCount" in user && user.muteCount is int &&
    "searchToken" in user && user.searchToken is map &&
    "postCount" in user && user.postCount is int &&
    "userNameLanguageCode" in user && user.userNameLanguageCode is string &&
    "userNameNegativeScore" in user && user.userNameNegativeScore is number &&
    "userNamePositiveScore" in user && user.userNamePositiveScore is number &&
    "userNameSentiment" in user && user.userNameSentiment is string &&
    "updatedAt" in user && user.updatedAt is timestamp &&
    "userName" in user && user.userName is string &&
    "userImageURL" in user && user.userImageURL is string &&
    "uid" in user && user.uid is string && 
    //documentに含まれているuidがfirebaseAuthのuidと同じであることを確認する。 
    user.uid == uid;
  }

  function isValidPost(post, uid) {
    return post.size() == 20 &&
      "commentCount" in post && post.commentCount is int &&
      "createdAt" in post && post.createdAt is timestamp &&
      "hashTags" in post && post.hashTags is list &&
      "imageUrl" in post && post.imageUrl is string &&
      "likeCount" in post && post.likeCount is int &&
      "text" in post && post.text is string &&
      "textLanguageCode" in post && post.textLanguageCode is string &&
      "textNegativeScore" in post && post.textNegativeScore is number &&
      "textPositiveScore" in post && post.textPositiveScore is number &&
      "textSentiment" in post && post.textSentiment is string &&
      "muteCount" in post && post.muteCount is int &&
      "postId" in post && post.postId is string &&
      "uid" in post && post.uid is string &&
      "userName" in post && post.userName is string &&
      "userNameLanguageCode" in post && post.userNameLanguageCode is string &&
      "userNameNegativeScore" in post && post.userNameNegativeScore is number &&
      "userNamePositiveScore" in post && post.userNamePositiveScore is number &&
      "userNameSentiment" in post && post.userNameSentiment is string &&
      "userImageURL" in post && post.userImageURL is string &&
      "updatedAt" in post && post.updatedAt is timestamp &&
      post.uid == uid;
  }
}